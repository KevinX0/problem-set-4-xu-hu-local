---
title: "Your Title"
format: 
  pdf:
    keep-tex: true
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
---

**PS4:** Due Sat Nov 2 at 5:00PM Central. Worth 100 points. 
We use (`*`) to indicate a problem that we think might be time consuming. 
    
## Style Points (10 pts) 
Please refer to the minilesson on code style
**[here](https://uchicago.zoom.us/rec/share/pG_wQ-pHTQrJTmqNn4rcrw5V194M2H2s-2jdy8oVhWHkd_yZt9o162IWurpA-fxU.BIQlSgZLRYctvzp-)**.

## Submission Steps (10 pts)
1. This problem set is a paired problem set.
2. Play paper, scissors, rock to determine who goes first. Call that person *Partner 1*.
    - Partner 1 (name and cnet ID):Duoshu Xu, duoshu
    - Partner 2 (name and cnet ID):Jae Hu, jaehu
3. Partner 1 will accept the `ps4` and then share the link it creates with their partner. You can only share it with one partner so you will not be able to change it after your partner has accepted. 
4. "This submission is our work alone and complies with the 30538 integrity policy." Add your initials to indicate your agreement: \*\*\_\_\*\* \*\*\_\_\*\*
5. "I have uploaded the names of anyone else other than my partner and I worked with on the problem set **[here](https://docs.google.com/forms/d/185usrCREQaUbvAXpWhChkjghdGgmAZXA3lPWpXLLsts/edit)**"  (1 point)
6. Late coins used this pset: \*\*\_\_\*\* Late coins left after submission: \*\*\_\_\*\*
7. Knit your `ps4.qmd` to an PDF file to make `ps4.pdf`, 
    * The PDF should not be more than 25 pages. Use `head()` and re-size figures when appropriate. 
8. (Partner 1): push  `ps4.qmd` and `ps4.pdf` to your github repo.
9. (Partner 1): submit `ps4.pdf` via Gradescope. Add your partner on Gradescope.
10. (Partner 1): tag your submission in Gradescope

**Important:** Repositories are for tracking code. **Do not commit the data or shapefiles to your repo.** The best way to do this is with `.gitignore`, which we have covered in class. If you do accidentally commit the data, Github has a [guide](https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github#removing-files-from-a-repositorys-history). The best course of action depends on whether you have pushed yet. This also means that both partners will have to download the initial raw data and any data cleaning code will need to be re-run on both partners' computers. 

## Download and explore the Provider of Services (POS) file (10 pts)

1.  

```{python}
import pandas as pd

file_path = '/Users/kevinxu/Documents/GitHub/problem-set-4-xu-hu/pos2016.csv'
pos2016_df = pd.read_csv(file_path)

pos2016_df.head()
```

2. 
a.    

```{python}
short_term_2016 = pos2016_df[(pos2016_df['PRVDR_CTGRY_CD'] == 1) & (pos2016_df['PRVDR_CTGRY_SBTYP_CD'] == 1)]

num_short_term_hospitals = short_term_2016.shape[0]
num_short_term_hospitals

```

b. 


3.  
```{python}
pos2017_df = pd.read_csv('/Users/kevinxu/Documents/GitHub/problem-set-4-xu-hu/pos2017.csv', encoding='latin1', low_memory=False)
pos2018_df = pd.read_csv('/Users/kevinxu/Documents/GitHub/problem-set-4-xu-hu/pos2018.csv', encoding='latin1', low_memory=False)
pos2019_df = pd.read_csv('/Users/kevinxu/Documents/GitHub/problem-set-4-xu-hu/pos2019.csv', encoding='latin1', low_memory=False)

short_term_2016 = pos2016_df[(pos2016_df['PRVDR_CTGRY_CD'] == 1) & (pos2016_df['PRVDR_CTGRY_SBTYP_CD'] == 1)]
short_term_2017 = pos2017_df[(pos2017_df['PRVDR_CTGRY_CD'] == 1) & (pos2017_df['PRVDR_CTGRY_SBTYP_CD'] == 1)]
pos2018_df.rename(columns={'ï»¿PRVDR_CTGRY_SBTYP_CD': 'PRVDR_CTGRY_SBTYP_CD'}, inplace=True)
short_term_2018 = pos2018_df[(pos2018_df['PRVDR_CTGRY_CD'] == 1) & (pos2018_df['PRVDR_CTGRY_SBTYP_CD'] == 1)]
short_term_2019 = pos2019_df[(pos2019_df['PRVDR_CTGRY_CD'] == 1) & (pos2019_df['PRVDR_CTGRY_SBTYP_CD'] == 1)]

all_short_term_hospitals = pd.concat([short_term_2016, short_term_2017, short_term_2018, short_term_2019], axis=0)
total_short_term_hospitals = all_short_term_hospitals.shape[0]
print("Total number of short-term hospitals from 2016 to 2019:", total_short_term_hospitals)


```
```{python}
import pandas as pd
import altair as alt

# Add a 'Year' column to each subset
short_term_2016['Year'] = 2016
short_term_2017['Year'] = 2017
short_term_2018['Year'] = 2018
short_term_2019['Year'] = 2019

# Concatenate all short-term hospital datasets with the 'Year' column
all_short_term_hospitals = pd.concat([short_term_2016, short_term_2017, short_term_2018, short_term_2019], axis=0)

# Count the number of observations by year
observations_by_year = all_short_term_hospitals['Year'].value_counts().sort_index()

# Prepare the data for Altair plotting
observations_data = pd.DataFrame({
    'Year': observations_by_year.index,
    'Number of Observations': observations_by_year.values
})

# Create the Altair bar chart
chart = alt.Chart(observations_data).mark_bar().encode(
    x=alt.X('Year:O', title='Year'),
    y=alt.Y('Number of Observations:Q', title='Number of Observations'),
    tooltip=['Year', 'Number of Observations']
).properties(
    title='Number of Short-term Hospital Observations by Year (2016-2019)',
    width=500,
)

chart
```

4. 
a.
```{python}
# Count the number of unique hospitals by year based on CMS Certification Number
unique_hospitals_by_year = all_short_term_hospitals.groupby('Year')['PRVDR_NUM'].nunique()

# Prepare the data for Altair plotting
unique_hospitals_data = pd.DataFrame({
    'Year': unique_hospitals_by_year.index,
    'Number of Unique Hospitals': unique_hospitals_by_year.values
})

# Create the Altair bar chart for unique hospitals
unique_hospitals_chart = alt.Chart(unique_hospitals_data).mark_bar(color='teal').encode(
    x=alt.X('Year:O', title='Year'),
    y=alt.Y('Number of Unique Hospitals:Q', title='Number of Unique Hospitals'),
    tooltip=['Year', 'Number of Unique Hospitals']
).properties(
    title='Number of Unique Short-term Hospitals by Year (2016-2019)',
    width=500,
)

unique_hospitals_chart

```

b.

## Identify hospital closures in POS file (15 pts) (*)

1. 
2. 
3. 
    a.
    b.
    c.

## Download Census zip code shapefile (10 pt) 

1. 
    a.
    b. 
2. 

## Calculate zip code’s distance to the nearest hospital (20 pts) (*)

1. 
2. 
3. 
4. 
    a.
    b.
5. 
    a.
    b.
    c.
    
## Effects of closures on access in Texas (15 pts)

1. 
2. 
3. 
4. 

## Reflecting on the exercise (10 pts) 
